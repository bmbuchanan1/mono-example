#!/usr/bin/env node
import{a as M,b as $,c as g,e as f,f as k,i as j}from"./chunk-IL3BSLIU.mjs";import I from"chalk";import{Command as R}from"commander";import O from"inquirer";import x from"path";import n from"chalk";async function y(t){let r=new k;r.hero();let i=await O.prompt({type:"input",name:"directoryInput",message:"Where is the root of the repo?",when:!t,default:".",validate:e=>{let{exists:s,absolute:a}=g({directory:e});return s?!0:`Directory ${n.dim(`(${a})`)} does not exist`},filter:e=>e.trim()}),{directoryInput:c=t}=i,{exists:b,absolute:p}=g({directory:c});if(!b)return console.error(`Directory ${n.dim(`(${p})`)} does not exist`),process.exit(1);let m=await f({root:p}),u=m.workspaceData.workspaces.length,l=u>0,o={};m.workspaceData.workspaces.forEach(e=>{let a=x.relative(p,e.paths.root).split(x.sep)[0];o[a]||(o[a]=[]),o[a].push(e)});let w=e=>`${e.name} (${n.italic(`./${x.relative(p,e.paths.root)}`)})`,d=({number:e,directory:s,workspaces:a})=>{r.indented(2,`${e}. ${n.bold(s)}`),a.forEach((E,L)=>{r.indented(3,`${L+1}. ${w(E)}`)})};r.header("Repository Summary"),r.indented(1,`${n.underline(m.name)}:`),r.indented(1,`Package Manager: ${n.bold(n.italic(m.packageManager))}`),l&&(r.indented(1,`Workspaces (${n.bold(u.toString())}):`),Object.keys(o).forEach((e,s)=>{d({number:s+1,directory:e,workspaces:o[e]})}),r.blankLine())}import D from"inquirer";import W from"chalk";function S({packageManager:t,currentWorkspaceManger:r,availablePackageManagers:i}){return r===t?"already in use":i[t]?!1:"not installed"}async function h(t,r,i){let c=new k(i);c.hero(),c.header("Welcome, let's convert your project."),c.blankLine();let b=await D.prompt({type:"input",name:"directoryInput",message:"Where is the root of your repo?",when:!t,default:".",validate:e=>{let{exists:s,absolute:a}=g({directory:e});return s?!0:`Directory ${W.dim(`(${a})`)} does not exist`},filter:e=>e.trim()}),{directoryInput:p=t}=b,{exists:m,absolute:u}=g({directory:p});if(!m)return console.error(`Directory ${W.dim(`(${u})`)} does not exist`),process.exit(1);let[l,o]=await Promise.all([f({root:u}),M()]),w=await D.prompt({name:"packageManagerInput",type:"list",message:`Convert from ${l.packageManager} workspaces to:`,when:!r||!Object.keys(o).includes(r),choices:["npm","pnpm","yarn"].map(e=>({name:`${e} workspaces`,value:e,disabled:S({packageManager:e,currentWorkspaceManger:l.packageManager,availablePackageManagers:o})}))}),{packageManagerInput:d=r}=w;await j({project:l,to:{name:d,version:o[d]},logger:c,options:i})}var A={name:"@turbo/workspaces",version:"1.10.13",description:"Tools for working with package managers",homepage:"https://turbo.build/repo",license:"MPL-2.0",repository:{type:"git",url:"https://github.com/vercel/turbo",directory:"packages/turbo-workspaces"},bugs:{url:"https://github.com/vercel/turbo/issues"},bin:"dist/cli.js",module:"dist/index.mjs",main:"dist/index.js",types:"dist/index.d.ts",scripts:{build:"tsup",dev:"tsup --watch",test:"jest",lint:"eslint src/**/*","check-types":"tsc --noEmit","lint:prettier":"prettier -c . --cache --ignore-path=../../.prettierignore"},dependencies:{chalk:"2.4.2",commander:"^10.0.0",execa:"5.1.1","fast-glob":"^3.2.12","fs-extra":"^10.1.0","gradient-string":"^2.0.0",inquirer:"^8.0.0","js-yaml":"^4.1.0",ora:"4.1.1",rimraf:"^3.0.2",semver:"^7.3.5","update-check":"^1.5.4"},devDependencies:{"@turbo/eslint-config":"workspace:*","@turbo/test-utils":"workspace:*","@turbo/tsconfig":"workspace:*","@turbo/utils":"workspace:*","@types/chalk-animation":"^1.6.0","@types/fs-extra":"^9.0.13","@types/gradient-string":"^1.1.2","@types/inquirer":"^7.3.1","@types/jest":"^27.4.0","@types/js-yaml":"^4.0.5","@types/node":"^18.17.2","@types/rimraf":"^3.0.2","@types/semver":"^7.3.9",jest:"^27.4.3",semver:"^7.3.5","strip-ansi":"^6.0.1","ts-jest":"^27.1.1",tsup:"^5.10.3",typescript:"^4.5.5"},files:["dist"],publishConfig:{access:"public"}};var v=new R;v.name("@turbo/workspaces").description("Tools for working with package manager workspaces").version(A.version,"-v, --version","output the current version");v.command("convert").description("Convert project between workspace managers").argument("[path]","Project root").argument("[package-manager]","Package manager to convert to").option("--skip-install","Do not run a package manager install after conversion",!1).option("--dry","Dry run (no changes are made to files)",!1).option("--force","Bypass Git safety checks and forcibly run conversion",!1).action(h);v.command("summary").description("Display a summary of the specified project").argument("[path]","Project root").action(y);v.parseAsync().catch(t=>{console.log(),t instanceof $?console.log(I.red(t.message)):(console.log(I.red("Unexpected error. Please report it as a bug:")),console.log(t.message)),console.log(),process.exit(1)});
